{"meta":{"title":"ke_xx","subtitle":null,"description":"Blog Record Other","author":"ke_xx","url":"https://ic-.gihub.io"},"pages":[{"title":"archive","date":"2017-02-16T03:32:03.000Z","updated":"2017-02-16T03:33:05.000Z","comments":true,"path":"archive/index.html","permalink":"https://ic-.gihub.io/archive/index.html","excerpt":"","text":"1111"},{"title":"分类","date":"2017-02-20T10:38:28.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"categories/index.html","permalink":"https://ic-.gihub.io/categories/index.html","excerpt":"","text":""},{"title":"record","date":"2017-02-16T03:32:13.000Z","updated":"2017-02-16T03:33:05.000Z","comments":true,"path":"record/index.html","permalink":"https://ic-.gihub.io/record/index.html","excerpt":"","text":"22222"},{"title":"标签云","date":"2014-12-22T04:39:04.000Z","updated":"2017-02-21T02:28:25.000Z","comments":false,"path":"tags/index.html","permalink":"https://ic-.gihub.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Array","slug":"Array","date":"2017-03-20T10:24:06.000Z","updated":"2017-03-20T12:10:52.000Z","comments":true,"path":"2017/03/20/Array/","link":"","permalink":"https://ic-.gihub.io/2017/03/20/Array/","excerpt":"Array创建数组的方法123var arr = new Array(3) //[undefined * 3]var arr = new Array(1,2,3) //[1,2,3]var arr = [1,2,3] 属性123arr.constructor //Arrayarr.length //numarr.__proto__","text":"Array创建数组的方法123var arr = new Array(3) //[undefined * 3]var arr = new Array(1,2,3) //[1,2,3]var arr = [1,2,3] 属性123arr.constructor //Arrayarr.length //numarr.__proto__ 方法123456789101112131415161718192021222324252627282930313233343536373839arr[n] = 'new ele'delete arr[0] //[undefied, 2,3]arr.push(add_end) //arr.length arr has change 尾部插入arr.unshift() //arr.length arr has change 头部插入arr.pop() //arr.length arr has change 尾部删除arr.shift() //arr.length arr has change 头部删除arr.slice(start, end) //new arr arr no change arr.slice(start) arr.slice(start, -end)// return delete ele_arr arr has changearr.splice(start, delete_length, add_element) arr.sort((x, y)=&gt;&#123; return x - y &gt; 0 return x - y &lt; 0 return x - y = 0&#125;)arr.reverse() arr.concat([])arr.join(',')arr.indexOf(ele, start)arr.lastIndexOf(ele)//迭代方法arr.every((item, index, arr) =&gt;&#123; //所以为true 就为true return true/false&#125;)arr.some((v, k, arr)=&gt;&#123;&#125;) //任意一项返回 true 为truearr.filter((item, index, arr)=&gt;&#123; //返回值为true的新数组&#125;)arr.forEach((v, k, arr) =&gt; &#123; //没有返回值&#125;)arr.map((v, k, arr) =&gt;&#123;&#125;&#125;) //new arr","categories":[],"tags":[{"name":"js","slug":"js","permalink":"https://ic-.gihub.io/tags/js/"},{"name":"array","slug":"array","permalink":"https://ic-.gihub.io/tags/array/"}]},{"title":"interview","slug":"interview","date":"2017-03-08T01:15:32.000Z","updated":"2017-03-20T12:43:16.000Z","comments":true,"path":"2017/03/08/interview/","link":"","permalink":"https://ic-.gihub.io/2017/03/08/interview/","excerpt":"1.Doctype的作用？标准模式和兼容模式各有什么区别？ &lt;!Doctype&gt; 位于html文档的第一行 告诉浏览器以什么标准解析html文档 Doctype不存在或者格式不正确会导致文档以兼容模式呈现 标准模式：排版和js都以浏览器支持的最高标准运行 兼容模式：页面以宽松的向后兼容的方式显示， 模拟老浏览器的行为 防止页面无法访问。","text":"1.Doctype的作用？标准模式和兼容模式各有什么区别？ &lt;!Doctype&gt; 位于html文档的第一行 告诉浏览器以什么标准解析html文档 Doctype不存在或者格式不正确会导致文档以兼容模式呈现 标准模式：排版和js都以浏览器支持的最高标准运行 兼容模式：页面以宽松的向后兼容的方式显示， 模拟老浏览器的行为 防止页面无法访问。 HTML 为什么只要要写 &lt;!DOCTYPE html&gt;？ HTML5 不属于SGML集合 不需要对DTD进行引用 SGML 标准通用语言 是个大集合 DTD document type definition 但是需要 doctype 规范浏览器的行为 3.行内元素 块级元素 空元素 有哪些 行内元素： a b span i em strong img input select 块级元素： h1.. div p ul ol li dl dt dd 空元素： br hr img input link meta 4.样式导入link和@import的区别 link 属于html标签 除了加载css 还能定语 rel rss @import 是css定义的只能提供加载css 页面加载时候 link会同时加载 @import引用的css会等页面加载完成在加载 @import ie5 以上兼容 5.介绍下浏览器内核的理解 主要分成2部分：渲染引擎和js引擎 渲染引擎负责取得网页内容 整理 计算 渲染 js引擎负责解析执行js 6.常见浏览器内核 trident ie 360 搜狗 gecko ff moz webkit safari chrome 7.html5有哪些新特性，移除哪些元素，如何处理html5新标签浏览器兼容问题？ 新特性： canvas video audio localStorage sessionStorage 语义化标签： article section header footer menu nav 表单控件 data time email url search 移除的元素： basefont big center font s 支持html5新元素：document.createElement 或者用成熟的框架 8.HTML语义化理解 用正确的标签做正确的事情 有利于优化css代码 让页面结构清晰 便于浏览器解析 搜索引擎解析 有利于seo 爬虫会分析html标记定语权重 9.html离线存储怎么使用 用户没有连接网络的时候正常访问站点和应用， 用户连接后更新用户机器上的缓存 基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的缓存清单离线缓存资源 这资源就像cookie一样被存储下来。 读取index.manifest 10.cookie localStorage sessionStorage的区别 cookie 标识用户身份而存储在用户本地终端上的数据 同源http请求头都会携带 大小有限不能超过4k 在设置过期时间之前一直有效 localStorage 本地永久存储 不限制大小 sessionStorage 会话存储 浏览器关闭后自动删除 11.iframe 有哪些确定 iframe 会阻塞主页面的onload事件 搜索引擎无法解读这种页面 不利于seo iframe和主页面共享连接池（2，4，6）会影响页面的并行加载 解决：js 动态赋值 src 12.label有什么作用 可以设置用户选择label标签那个表单元素获取焦点 13.html关闭form自动autocomplete=off 14.实现浏览器内多个标签页直接通信 websocket localstorge s localstorge另外一个浏览器上下文里被添加，修改或删除 都会触发一个事件 通过监听事件实现通信 但是无痕下报错 15.websocket 如何兼容 flash socket 长轮询的XHR 16.页面可见性(visibilityState)用途 监听visibilityState 检测页面是否 可操作自动播放或暂停 17.如何在页面上实现一个原型的可点击区域 border-radius svg map+area 纯js实现计算 18.网页验证码干嘛的 防止恶意刷请求 19.标准盒模型和低版本ie盒子模型的区别 标准盒模型 width = width box-sizing=content-box的效果 ie盒模型 width = width+padding+border box-sizing=border-box的效果 20.css选择符有哪些 哪些属性可以继承 #id .classname p div+p div &gt; p div p div:after div:nth-child() a[rel=’external’] 可继承 font-size font-family color ul li dl dd dt 不可继承 border margin padding width height 21.css优先级 import &gt; 标签内部 &gt; 内部样式 &gt; 外部样式文件 !important &gt; id &gt; classname &gt; tag &gt; * 22.css3新增伪类 :first-of-type :last-of-type :one-of-type :after :before :enable :checked :disbaled 23.div如何居中 margin: 0 auto 水平居中 position:absolute; left:0; top: 0; bottom: 0; right: 0; width: 300px; height: 300px; position:relative; left: 50%; top: 50%; margin-left: -150px; margin-top: -150px; position:absolute; left: 50%; top: 50%; transform: translate(-50%, -50%) parentNode: display:flex; item-align: center; //垂直居中 justify-content:center //水平居中 24.display有哪些值 display: none display: block display: inline display: inline-block display: table display: inherit display: list-item 象块类型元素一样显示，并添加样式列表标记。 25.position static 默认 inherit 继承父 absolute 相对于设置了position不为static的父级定位 relative 相对于自身文档流位置 fixed 相对于可视区 ie不兼容 sticky (relative和fixed结合) 目标区域在屏幕中可见的时候 是relative效果 当目标超出滚动区域的时候 吸顶效果或底部固定效果 26.css3新特性 border-radius box-shadow text-shadow transform gradient 27.css3 flexbox 28.css创建三角形 border 隐藏另外三个边 29.常见浏览器兼容性 png24在ie6下显示背景，解决 png8 浏览器默认margin padding不同 reset ie6 双边距：float元素横行的margin产生双边距 解决 _display:inline hack \\9 //ie6,7,8 //ie6,7 _ //ie6 chrome 小于12px的字体 按照12px显示 解决 -webkit-text-size-adjust: none ie下获取元素属性可以直接获取 ff要用getAttribute 统一解决 getAttribute 超链接访问过后 hover样式不显示 l-v-h-a : a:link a:visited: a:hover a:active 30.为什么要初始化css 因为浏览器兼容问题， 不同浏览器对有些标签的默认值是不同的， 如果不做初始化 不同浏览器下表现会有差异 最简单的 *{margin: 0; padding: 0} 31.position跟display margin collapse overflow float 特性叠加 如果元素为display:那么元素不渲染，position float不起作用 如果维absolute fixed 那么float不起作用 float 元素脱离文档流 float absolute inline-block的元素 margin 不塌陷 32.css权重 相同权重 最后定义的样式会起作用 33.清除浮动 清除浮动 为了消除 浮动元素对布局产生的影响 浮动的元素 高度会塌陷 高度塌陷后面的内容不能正常显示 添加标签设置 clear:both 清除浮动 overflow: hidden/auto; *zoom: 1; :after clear:both 闭合浮动 其他的为了隐藏元素 zoom：1 触发IE hasLayout12.clearfix&#123;*zoom:1&#125; .clearfix:after&#123;clear:both; content:'', display:block; font-size:0; height: 0; visibility: hidden&#125; 34.外边距合并，塌陷 垂直方向 小margin回塌陷进入大margin 35.zoom:1清楚浮动的原理 清除浮动 触发 hasLayout Zoom ie 专有属性 设置检索元素的缩放比例 解决ie比较奇怪的bug 设置了zoom 会触发重新计算 宽高 发生重新渲染 36.移动端 媒体查询 @media(条件)and (条件){ 当前条件下使用的样式} 37.css预处理器 less 组内用的less sass sass功能会强大些 38.css优化，提高性能的方法 选择器的优化 样式顺序的优化 提取变量（颜色 字体大小 动画 等） 基础样式（margin padding flex clear等） ui组件 如果有统一的ui规范 做好基础规范 用统一的规范 保证视觉效果的一致性 使用构建工具 打包压缩 自动添加前缀 39.浏览器是怎么解析css的 从左往右 就近原则 40.网页中用奇数还是偶数字体 偶数 会好些 居中 如果有比例计算的话 41.margin 和padding的使用场景 margin是用来分隔元素与元素 padding分隔元素与内容的 有border 有background的时候 42.抽离样式模块怎么写，说出思路，有无实践经验？ 1.我们一般会用sass或者less先抽离出所有变量 如颜色 字体大小 主题风格 网站字体 为单独的文件 2.我们还会按属性 抽离出不同的 模块 如果 margin和padding border 公用ui模块 字体图标模块 3.当要用这些的模块的就@import 引入 字体图标可以一开始在main文件引入 43.元素竖向的百分比设定是相对于容器的高度吗? 不是 是宽度 44.伪类和伪元素 :before css3伪类 ::before css3伪元素 45.chrome记住密码后自动填充表单黄色背景1234567input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill&#123; background-color: rgb(250, 255, 189); /* #FAFFBD; */ background-image: none; color: rgb(0, 0, 0)&#125; 46.line-height如何理解？ 撑开高度 单行可做居中 47.设置元素浮动后display的值？ display: blcok 48.chrome支持12px的字体？ 图片 最小使用12px的字体 设置-webkit-text-adjust: none chrome低版本 27以下有效 对中文无效 用transform 49.字体清晰变细？ -webkit-font-smoothing: antialiased; 50.手写动画执行时间？ requestAnimationFrame 60Hz 1000s/60 = 16.7ms 51.display:inline-block 会显示间隔？ 删除空格 font-size: 0 52.overflow: scroll时不能平滑滚动的问题怎么处理？ -webkit-overflow-scrolling: touch;","categories":[],"tags":[{"name":"interview","slug":"interview","permalink":"https://ic-.gihub.io/tags/interview/"}]},{"title":"laoshi","slug":"laoshi","date":"2017-03-03T05:11:15.000Z","updated":"2017-03-21T07:01:59.000Z","comments":true,"path":"2017/03/03/laoshi/","link":"","permalink":"https://ic-.gihub.io/2017/03/03/laoshi/","excerpt":"天秤座","text":"天秤座广州大学 英语专8广东省广州市番禺区南浦西一村西一小学10-15农历相识2.219.1号第一天当班主任大姨妈 18号-24号 答应的事情：天涯海角 北京 看雪 摩天轮 看樱花 舍友 少琴 喜欢 老师初中同学班搭 林小胖 对象 华工研究生 做水利的 - 喜欢体育老师 被拒绝 - 体育老师 -渣男 大学同学闺蜜初中同学好朋友 胖子 湛江 会计师好朋友 中国移动高中同学重庆好朋友： 丽小锦日本好朋友凤霞 胡玉 想北漂的女老师 156要求175会 打篮球 慢节奏的生活奶娘是谁珊琦","categories":[],"tags":[]},{"title":"webpack","slug":"webpack","date":"2017-02-27T07:35:48.000Z","updated":"2017-03-01T09:04:47.000Z","comments":true,"path":"2017/02/27/webpack/","link":"","permalink":"https://ic-.gihub.io/2017/02/27/webpack/","excerpt":"","text":"entry1234entry:&#123; \"index\": ['../xxx/index.js', hotMiddlewareScript], \"page1\": ['../xxx/page1/index.js', hotMiddlewareScript]&#125; output path: 文件打包存放路径 publicPath: 引用的文件路径 publicPath配合node服务端12345678910111213141516webpack.jsentry: &#123; indexA: ['./assets/javascripts/index.js']&#125;output: &#123; path: './public/dist', publicPath: '/assets/', filename: '/javascript/[name].js', libary&#125;// server/index.jsvar app = express()app.use('/assets', express.static(path.join(__dirname, '../public/dist')));// filename: /public/dist/javascript/indexA.js// publicPath: &lt;img src=\"/assets/logo.png\" /&gt;","categories":[{"name":"开发工具","slug":"开发工具","permalink":"https://ic-.gihub.io/categories/开发工具/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://ic-.gihub.io/tags/webpack/"}]},{"title":"express","slug":"express","date":"2017-02-22T03:45:30.000Z","updated":"2017-02-22T04:07:29.000Z","comments":true,"path":"2017/02/22/express/","link":"","permalink":"https://ic-.gihub.io/2017/02/22/express/","excerpt":"expressexpress 中文API 快速生成应用骨架12npm install express-generator -gexpress myapp","text":"expressexpress 中文API 快速生成应用骨架12npm install express-generator -gexpress myapp Api入口12var express = require(&apos;express&apos;)var app = express() express.static 是 Express 内置的唯一一个中间件,负责托管 Express 应用内的静态资源。1app.use([&apos;/path&apos;], express.static(&apos;public&apos;, [options])) Application处理请求1234app.get('/', function(req, res)&#123; res.send('hello world');&#125;);app.listen(3000); app.local.variables 类似全局变量 app.local.title = ‘my app’ app.local.strftime = require(“strftime”)app.mountpathapp.set(name, value)app.get(name)123app.set('title', 'my site')app.get('title')//=&gt;my site app.enable(name) //set name = trueapp.disable(name) //set name = falseapp.enabled(name) name 是否启用12345app.enabled('trust proxy')//=&gt; falseapp.enable('trust proxy')app.enabled('trust proxy')//=&gt; true app.disbaled(name) name 是否禁用12345app.disabled('trust proxy')//=&gt; trueapp.enable('trust proxy')app.disabled('trust proxy')//=&gt; false app.configure([env], callback) 当env和 app.get(‘env’) 匹配（即使 process.env.NODE_ENV）执行callback12345678910111213141516171819202122//所有环境app.configure(function()&#123; app.set('title', 'My Application')&#125;)//开发环境app.configure('development',function()&#123; app.set('db uri', 'localhost/dev')&#125;)//生产环境app.configure('production', function()&#123; app.set('db uri', 'n.n.n.n/prop')&#125;)// 所有环境app.set('title', 'My Application');// 只用于开发环境if ('development' == app.get('env')) &#123; app.set('db uri', 'localhost/dev');&#125;// 只用于生产环境if ('production' == app.get('env')) &#123; app.set('db uri', 'n.n.n.n/prod');&#125; app.use([path], function) 中间键 path默认为 ‘/‘123456789var express = require('express')var app = express()//一个简单的loggerapp.use(function(req, res, next)&#123; console.log('%s %s', req.methond, req.url) next()&#125;)//响应app.use('/static', express.static(__dirname+'/public')) settings 改变 express 的行为 例：app.set(‘trust proxy’, ‘loopback’) env trust proxy …. app.engine(ext, callback) 注册模板引擎 ext(扩展名) callback处理对应的模板 app.engine(‘jade’, require(‘jade’).__express) 缓存处理 jade 后缀的 jade 模板到 require 中123456789101112app.engine('view engine', 'pug')//index.pughtml head title = title body h1 = message//appapp.get('/', function(req, res)&#123; res.render('index', &#123;title: 'Hey', message: 'Hello, here'&#125;)&#125;) app.params([name], callback) 路由参数处理逻辑 尝试加载信息id为(name的值) 如果没有传递给next(err) 123456789101112app.params('user', function(req, res, next, id)&#123; User.find(id, function(err, user)&#123; if(err)&#123; next(err) &#125;else if(user)&#123; req.user = user; next() &#125;else&#123; next(new Error('faild to load user')) &#125; &#125;)&#125;) 如果只传callback 那么就可以改变 app.params() API 123456789101112131415161718192021222324app.params(function(name, fn)&#123; if( fn installof RegExp)&#123; return function(req, res, next, val)&#123; var captures if(capture = fn.exec(String(val)))&#123; req.params[name] = captures next() &#125;else&#123; next('route') &#125; &#125; &#125;&#125;)app.params('id', /\\d+$/)app.get('/user/:id', function(req, res)&#123; res.send('user'+req.params.id))&#125;)app.params('range', /^(\\w+)\\.\\.(\\w+)?$/)app.get('/range/:range', function(req, res)&#123; var range = req.params.range; res.send('from'+range[1]+'to'+range[2])&#125;)","categories":[{"name":"node","slug":"node","permalink":"https://ic-.gihub.io/categories/node/"}],"tags":[{"name":"node","slug":"node","permalink":"https://ic-.gihub.io/tags/node/"},{"name":"express","slug":"express","permalink":"https://ic-.gihub.io/tags/express/"}]},{"title":"wx小程序","slug":"wx","date":"2017-02-22T03:02:12.000Z","updated":"2017-02-22T03:35:48.000Z","comments":true,"path":"2017/02/22/wx/","link":"","permalink":"https://ic-.gihub.io/2017/02/22/wx/","excerpt":"Appid 获取121.申请账号2.找企业认证信息 文档wx小程序 文件结构123456789app.jsapp.jsonapp.wxsspages home 1. xx.js js 2. xx.json 配置信息 3. xx.wxss css 4. xx.wxml html","text":"Appid 获取121.申请账号2.找企业认证信息 文档wx小程序 文件结构123456789app.jsapp.jsonapp.wxsspages home 1. xx.js js 2. xx.json 配置信息 3. xx.wxss css 4. xx.wxml html 配置信息123456789app.json 1.pages 路由 required 2.windows 小程序的状态栏、导航条、标题、窗口背景色。 3.tabBar 设置底部 tab 的表现 4.networkTimeout 设置网络超时时间 5.debugpages home 1.home.json 逻辑层1.注册程序12345678app.js [once]App(&#123; onLunch:function()&#123;&#125;, onShow:function()&#123;&#125;, onHide:function()&#123;&#125;, onError:function()&#123;&#125;, any[any typeof]&#125;) 2.注册页面123456789101112131415pages/home/home.jsvar app = getApp(); //获取app实例Pages(&#123; data, onLoad, onReady, onShow, onHide, onUnload, onPullDownRefresh, onReachBottom, onShareAppMessage, any&#125;) setData(&#123;&#125;) //更新数据 3.页面生命周期12345678910111213141516onLoad: 页面加载 一个页面只会调用一次。 接收页面参数可以获取wx.navigateTo和wx.redirectTo及&lt;navigator/&gt;中的 query。onShow: 页面显示 每次打开页面都会调用一次。 onReady: 页面初次渲染完成 一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。 对界面的设置如wx.setNavigationBarTitle请在onReady之后设置。详见生命周期onHide: 页面隐藏 当navigateTo或底部tab切换时调用。onUnload: 页面卸载 当redirectTo或navigateBack的时候调用。 4.页面路由1234wx.navigateTo()wx.redirectTo()wx.navigateBack()wx.switchTab() 5.模块化12module.export.sayHello = function()&#123;&#125;var sayHello = require('./sayHello.js') 6.API 视图层1.数据绑定123456789//1.属性在双引号内 \"\"//2.变量在双大括号内&#123;&#123;&#125;&#125;//3.关键字在双引号内 \"&#123;&#123;true/false&#125;&#125;\" \"false\":为字符串&lt;view&gt;&#123;&#123;message&#125;&#125;&lt;/view&gt;&lt;view id=\"item-&#123;&#123;id&#125;&#125;\" &gt;&lt;/view&gt;&lt;view wx:if=\"&#123;&#123;condition&#125;&#125;\"&gt;&lt;/view&gt;&lt;view checked=\"&#123;&#123;true/false&#125;&#125;\"&gt;&lt;/view&gt;&lt;view hidden=\"&#123;&#123;flag?true:false&#125;&#125;\"&gt;&lt;/view&gt; 2.条件渲染11.wx:if 惰性为false不渲染 hidden都渲染 3.列表渲染1231. for不提供wx:key报warming&lt;view wx:for=\"&#123;&#123;array&#125;&#125;\"&gt;&#123;&#123;index&#125;&#125;&#123;&#123;item.message&#125;&#125;&lt;/view&gt;&lt;view wx:for=\"&#123;&#123;array&#125;&#125;\" wx:for-index=\"idx\" wx:for-item=\"itemName\"&gt;&#123;&#123;idx&#125;&#125;:&#123;&#123;itemName.message&#125;&#125;&lt;/view&gt; 4.模板1234567891011121314151617// 1.定义模板&lt;template name=\"msgItem\"&gt; &lt;view&gt;&#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125;&lt;/view&gt; &lt;view&gt;Time: &#123;&#123;time&#125;&#125;&lt;/view&gt;&lt;/template&gt;// 2.调用模板// 模板拥有自己的作用域，只能使用data传入的数据。Page(&#123; data: &#123; item: &#123; index: 0, msg: 'this is template', time: '2017-01-11' &#125; &#125;&#125;)&lt;template is=\"msgItem\" data=\"&#123;&#123;..item&#125;&#125;\"&gt;&lt;/template&gt; 5.事件12345678910111213141516171819202122232425261.冒泡事件和非冒泡事件 冒泡事件： touchstart touchmove touchcancel touchend tap longtap 非冒泡事件：剩下的都是2.事件绑定 bind+事件名称: bindTap 不会阻止事件冒泡 catch+事件名称: catchTap 会阻止事件冒泡3.事件对象 1.baseEvent 基础事件对象属性： - type - timeStamp 时间戳 - target 触发事件的组件的一些属性值集合 - currentTarget 当前组件的一些属性值集合 2.customEvent 自定义事件属性列表 - +detail 额外的信息 3.TouchEvent 触摸事件属性 - +touchs 触摸事件，当前停留在屏幕中的触摸点信息的数组 - +changeTouchs 触摸事件，当前变化的触摸点信息的数组 4.特殊事件： &lt;canvas/&gt; 中的触摸事件不可冒泡，所以没有 currentTarget。 &lt;view data-alpha-beta=\"1\" data-alphaBeta=\"2\" bindTap=\"bindViewTap\"&gt;Dataset test&lt;/view&gt; Page(&#123; bindViewTap: function(event)&#123; event.target.dataset.alphaBeta === 1 //-会转为驼峰 event.target.dataset.alphabeta === 2 //大写会转为小写 &#125; &#125;) 6.引用121.import 引入&lt;template&gt; 使用2.include 除&lt;template&gt;标签 整个代码引入 wxss1.尺长单位：rpx可以根据屏幕宽度进行自适应。2.样式倒入： @import “common.wxss”;3.内联样式： 4.选择器：.class #id element(所有的view组件) element,element（element, checkbox） ::after ::before5.全局样式与局部样式 app.wxss 全局 pages/xx/xx.wxss 局部样式","categories":[],"tags":[{"name":"wx小程序","slug":"wx小程序","permalink":"https://ic-.gihub.io/tags/wx小程序/"}]},{"title":"gulp","slug":"gulp","date":"2017-02-22T03:00:07.000Z","updated":"2017-02-23T12:57:11.000Z","comments":true,"path":"2017/02/22/gulp/","link":"","permalink":"https://ic-.gihub.io/2017/02/22/gulp/","excerpt":"","text":"gulp Autoprefixer : 处理浏览器前缀 browserslist //浏览器版本 sourceMap gulp-rev-orig 自动加时间戳 fuck","categories":[{"name":"打包工具","slug":"打包工具","permalink":"https://ic-.gihub.io/categories/打包工具/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"https://ic-.gihub.io/tags/gulp/"}]},{"title":"React","slug":"React","date":"2017-02-21T11:38:39.000Z","updated":"2017-03-21T07:03:30.000Z","comments":true,"path":"2017/02/21/React/","link":"","permalink":"https://ic-.gihub.io/2017/02/21/React/","excerpt":"组件生命周期 挂载：组件被插入DOM getInitialState() 初始化state componentWillMount() 即将被挂载 componentDidMount() 组件挂载 DOM操作在这里 更新： componentWillReciveProps(object nextProps) 挂载组件接收新的props shouldComponentUpdate(object nextProps, object nextState) 比较 nextPorps 和 this.props 比较 nextState 和 this.state 返回 false 的话不更新DOM componentWillUpdate(object nextProps, object nextState) 这里可以调用this.setState({name: value}) componentDidUpdate(object prevProps, object prevState) 组件更新之后 移除 componentWillUnmount() 组件移除和销毁之前，这边做清理工作，如定时器","text":"组件生命周期 挂载：组件被插入DOM getInitialState() 初始化state componentWillMount() 即将被挂载 componentDidMount() 组件挂载 DOM操作在这里 更新： componentWillReciveProps(object nextProps) 挂载组件接收新的props shouldComponentUpdate(object nextProps, object nextState) 比较 nextPorps 和 this.props 比较 nextState 和 this.state 返回 false 的话不更新DOM componentWillUpdate(object nextProps, object nextState) 这里可以调用this.setState({name: value}) componentDidUpdate(object prevProps, object prevState) 组件更新之后 移除 componentWillUnmount() 组件移除和销毁之前，这边做清理工作，如定时器 组件不可用ref, key关键字做为属性 ref， key 关键字 组件引用设置ref=”exampleRef” 父组件可引用 组件内部实现ref=”insetRef” 组件内部使用 this.props.children 路由下面所有的子路由包含的子节点 每个路由下都对应个页面 12345678910111213141516// root/index.js App入口&lt;div&gt; &lt;Header /&gt; &lt;Toast /&gt; &lt;Alert /&gt; &#123;this.props.children&#125; &lt;Footer /&gt;&lt;/div&gt;//or&#123;children &amp;&amp; React.cloneElement(children, &#123; key: location.pathname, showToast, //action loading, //action getJumpUrl&#125;)&#125; react-router 代码按需加载 webpack 配置 name chunk 指定的名字, 未指定默认分配 id 作为 name。 chunkhash:5 是文件的 hash 码，这里只使用前五位123456output:&#123; path: path.join(__dirname, &apos;../dist/assets&apos;, filename: &apos;app.js&apos; publicPath: defaultSetting.publicPath, chunkFileName: &apos;[name].[chunkhash:5].chunk.js&apos;&#125; 提出route path require.ensure(dependencies, callback, chunkName) es6写法中 module.exports 需要在cb后面加.default1234567891011121314151617const rootRoute = (store)=&gt;&#123; return &lt;Route&gt; &lt;Route path=\"/home\" getComponent=&#123;(nextState, cb) =&gt; &#123; require.ensure([], (require) =&gt; &#123; cb(null, require('./components/home')).default &#125;) &#125;&#125; /&gt; &lt;/Route&gt;&#125;ReactDom.render( &lt;Roter history=&#123;browserHistory&#125; routes = &#123;rootRoute&#125; /&gt;) reactredux 管理状态state树 action 带数据的动作 reducer 根据action更新state树re store 接收reducer和初始数据 关联 action 和 reducer 拆分reducer 对应应用分支 然后用combineReducers()合并store 会把当前的state树和action传递给reducer store.getState() store.dispatch(action) store.subscribe(listener) 123import &#123;createStore&#125; from 'redux'import rootReducer from './reducers'let stroe = createStore(rootReducer, window.__initData__) react-redux","categories":[{"name":"React","slug":"React","permalink":"https://ic-.gihub.io/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://ic-.gihub.io/tags/React/"}]},{"title":"CSS 笔记","slug":"CSS","date":"2017-02-21T08:59:27.000Z","updated":"2017-03-02T08:12:06.000Z","comments":true,"path":"2017/02/21/CSS/","link":"","permalink":"https://ic-.gihub.io/2017/02/21/CSS/","excerpt":"属性1.overflow-scrolling: touch 2.pointer-events: none 设置元素点击穿透 3.transform-origin 设置变换源","text":"属性1.overflow-scrolling: touch 2.pointer-events: none 设置元素点击穿透 3.transform-origin 设置变换源 多行文本溢出1.display: -webkit-box 将对象作为弹性伸缩盒子模型显示； 2.-webkit-line-clamp: 2; 私有属性限制行数 3.-webkit-box-orient 设置或检索伸缩盒对象的子元素的排列方式； 4.text-overflow: ellipsis 用省略号“…”隐藏超出范围的文本。 5.元素设置有padding的时候 会漏出 12345display: -webkit-box;overflow : hidden;text-overflow: ellipsis;-webkit-line-clamp: 2;-webkit-box-orient: vertical; -webkit-font-smoothingWindows系统上-webkit-font-smoothing属性不造成区别。iOS上，修改-webkit-font-smoothing属性，结果是：-webkit-font-smoothing: none: 无抗锯齿-webkit-font-smoothing: antialiased | subpixel-antialiased | default: 灰度平滑 单行文本溢出省略号123overflow: hidden;text-overflow: ellipsis;white-space: nowrap; Iconfont 字体图标居中问题原因：baseline偏上12345上边界（ascent）下边界（descent)bbox: bounding box bbox=&quot;0 -212 1026.5 896&quot; //有问题 bbox=&quot;-0.161291 -128 1707 900&quot; //优化后的 解决：在iconfont项目中编辑图标，保存后回自动调整基线 DPI/PPI DPI（dots per inch） css像素 设备独立像素 PPI（pixels per inch） 物理像素 一个屏幕下拥有的物理显示单元的个数 计算：PPI = √ w^2 + h^2 / 对角线长度 PPI 120-160 低密度 160-240 中密度 240-320 高密度 320+ 超高密度(Retina) DPR (device pixel ratio) 设备像素比 设备像素比 = 物理像素 / 设备独立像素 // 在某一方向上，x方向或者y方向 window.devicePixelRatio获取到当前设备的dpr。 -webkit-device-pixel-ratio，-webkit-min-device-pixel-ratio，-webkit-max-device-pixel-ratio进行媒体查询 例： iphone 6 dpi 375*667 dpr = 2 ppi = 375*2/667*21234567891011dpr = 2width: 2pxheight: 2px=&gt; dpi 2/2=&gt; ppi 2*2/2*2 //占用16个 dpr = 3 width: 2pxheight: 2px=&gt; dpi 2/2=&gt; ppi 2*3/2*3 //占用36个","categories":[{"name":"css","slug":"css","permalink":"https://ic-.gihub.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://ic-.gihub.io/tags/css/"}]},{"title":"npm","slug":"npm","date":"2017-02-21T08:55:36.000Z","updated":"2017-02-21T08:56:53.000Z","comments":true,"path":"2017/02/21/npm/","link":"","permalink":"https://ic-.gihub.io/2017/02/21/npm/","excerpt":"","text":"自己手动rm -rm /User/xxx/.npm下的 cache包 会导致 npm无法使用： ENOENT: no such file or directory, uv_cwd 解决：npm cache clean -f 强制清除","categories":[{"name":"工具","slug":"工具","permalink":"https://ic-.gihub.io/categories/工具/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://ic-.gihub.io/tags/npm/"}]},{"title":"gen-thunk-promise-co","slug":"gen-thunk-promise-co","date":"2017-02-20T12:37:12.000Z","updated":"2017-02-21T03:21:32.000Z","comments":true,"path":"2017/02/20/gen-thunk-promise-co/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/gen-thunk-promise-co/","excerpt":"Generator 传统异步 代码各种嵌套 promise 只是改变了写法 然后最后用catch 捕获执行中的错误 1234567891011121314var readFile = require('fs-readFile-promise')readFile(fileA).then(function(data)&#123;console.log(data.toString())&#125;).then(function()&#123;return readFile(fileB)&#125;).then(function(data)&#123;console.log(data.toString())&#125;).catch(function(err)&#123;//&#125;)","text":"Generator 传统异步 代码各种嵌套 promise 只是改变了写法 然后最后用catch 捕获执行中的错误 1234567891011121314var readFile = require('fs-readFile-promise')readFile(fileA).then(function(data)&#123;console.log(data.toString())&#125;).then(function()&#123;return readFile(fileB)&#125;).then(function(data)&#123;console.log(data.toString())&#125;).catch(function(err)&#123;//&#125;) Generator ES6 中协程的体现 函数可以交出执行权（即暂停执行，又可以恢复执行） function name(){} 必须加上 号 整个 Generator 就是一个异步函数封装器 Gen 函数执行返回一个内部指针 函数体内外数据交互，处理错误机制 12345678910111213141516function* gen(x)&#123;var y = yield x + 2;return y&#125;var g = gen(1)g.next() // &#123;value: 3, done: false&#125;g.next() // &#123;value: undefined, done: true&#125;var g = g.gen(1)g.next() //&#123;value: 3, done: false&#125;g.next(2) //&#123;value:2, done: true&#125;var g = gen()g.next(2) // undefined+2 = NaN &#123;value:NaN, done: false&#125;g.next(3) // &#123;value: 3, done: true&#125; 1234567891011121314151617181920212223242526//内部处理错误，外部捕获function* gen(x)&#123;try&#123;var y = yield x + 2;&#125;catch(x)&#123;console.log(e)&#125;return y&#125;//异步var fetch = require('node-fetch')function* gen()&#123;var url = 'https://api.github.com/users/github';var result = yield fetch(url);console.log(result.bio)&#125;var g = gen();var result = g.next(); //执行fetch &#123;value: data, done: true&#125;result.value.then(function(data)&#123;return data.json()&#125;).then(function(data)&#123;g.next(data)&#125;) Thunk 传名调用 call by name 即只有在用的时候求值 用函数作为参数传入，调用的时候执行函数实现 thunk 函数的含义 实现将参数放到一个零时的函数，然后把这个临时函数传入函数内，这个临时函数就是Thunk 1234567891011121314function f(m)&#123;return m*2&#125;f(x+5)//等同于var thunk = function()&#123;return x+5&#125;function f(thunk)&#123;return thunk()*2&#125; Javascript语言的thunk函数 Thunk 函数替换的是多参数函数 将其替换成单参数的版本，且只接受回调函数作为参数 任意函数只要有回调函数都能写成Thunk函数的形式 生产环境转行 thunkify 123456789101112131415161718192021222324252627//正常版本的readFile(多参数版本)fs.readFile(filename, callback)//Thunk 版本的 readFile(单参数)var readFileThunk = Thunk(fileName);readFileThunk(callback)var Thunk = function(filename)&#123;return function(callback)&#123;return fs.readFile(filename, callback)&#125;&#125;// Thunk函数转换器var Thunk = function(fn)&#123;return function()&#123;var args = Array.prototype.slice.call(arguments);return function(callback)&#123;args.push(callback)return fn.apply(this,args)&#125;&#125;&#125;var readFileThunk = Thunk(fs.readFile);readFileThunk(filename)(callback) Generator 函数的流程管理 1234567891011121314151617181920212223var fs = require('fs')var thunkify = require('thunkify')var readFile = thunkify(fs.readFile)var gen = function* ()&#123;var r1 = yield readFile('/etc/fstab');console.log(r1.toString())var r2 = yield readFile('/etc/shells')console.log(r2.toString())&#125;var g = gen()var r1 = g.next()r1.value(function(err, data)&#123;if(err)throw errvar r2 = g.next(data) //把读取的data 往后传r2.value(function(err, data)&#123;if(err) throw errg.next(data)&#125;)&#125;) Thunk 函数的自动流程管理 1234567891011121314151617181920function run(fn)&#123;var gen = fn()function next(err, data)&#123;var result = gen.next(data)if(result.done)returnresult.value(next)&#125;next()&#125;var gen = function* ()&#123;var f1 = yield readFile('fileA');var f2 = yield readFile('fileB')var f3 = yield readFile('fileC')&#125;run(gen)","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://ic-.gihub.io/tags/ES6/"},{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/tags/JS/"},{"name":"Generator","slug":"Generator","permalink":"https://ic-.gihub.io/tags/Generator/"},{"name":"thunk","slug":"thunk","permalink":"https://ic-.gihub.io/tags/thunk/"},{"name":"promise","slug":"promise","permalink":"https://ic-.gihub.io/tags/promise/"},{"name":"co","slug":"co","permalink":"https://ic-.gihub.io/tags/co/"}]},{"title":"ES6","slug":"ES6","date":"2017-02-20T12:22:07.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/ES6/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/ES6/","excerpt":"ES6Let &amp; Const123456789101112131415161718192021/*1.没有预加载 变量提升2.块级作用域中 \b如果有声明变量，那么在声明之前不能使用\\(暂时性死区\\)3.不允许重复声明4.块级作用域5.允许块级作用域中声明函数 大括号 必须6.const 声明常量 let 声明变量7.顶层变量 不再window下*/function f1() &#123; let n = 5; if (true) &#123; let n = 10; &#125; console.log(n); // 5&#125;if(true)&#123; function f() &#123;&#125;&#125;let x = 1;window.x //undefined","text":"ES6Let &amp; Const123456789101112131415161718192021/*1.没有预加载 变量提升2.块级作用域中 \b如果有声明变量，那么在声明之前不能使用\\(暂时性死区\\)3.不允许重复声明4.块级作用域5.允许块级作用域中声明函数 大括号 必须6.const 声明常量 let 声明变量7.顶层变量 不再window下*/function f1() &#123; let n = 5; if (true) &#123; let n = 10; &#125; console.log(n); // 5&#125;if(true)&#123; function f() &#123;&#125;&#125;let x = 1;window.x //undefined 变量的解构：123456789101112131415按照一定的模式，从数组和对象中提取值，对变量进行赋值如果解构不成功等于undefined适用于 var let const数组按顺序对象按key值对象解构中模式不会被赋值 （即： let &#123;a: &#123;b: c&#125;&#125; = obj 中的a,b）数组 字符串 的length 可以用不要再模式中使用圆括号 数组解构123456789101112131415161718//匹配模式：var [a, b, c] = [1, 2, 3]a //1b //2c //3let [, ,third] = ['foo', 'bar', 'baz']third //'baz'let [head, ...tail] = [1,2,3,4]head //1tail //[2,3,4]//默认值：var [x= 1] = [undefined]x //1var [x = 1] = [null]x //null 对象解构123456789101112131415var &#123;foo, bar&#125; = &#123;foo: 'aaa', bar: 'bbb'&#125;foo //aaabar //bbblet obj = &#123;first: 'hello', last: 'world'&#125;let &#123;first: f, last: l&#125; = objf //hellol //worldfirst //error//默认值：var &#123;x = 3&#125; = &#123;&#125;x //3let &#123;log, sin, cos&#125; = Math 字符串解构12345678const &#123;a,b,c&#125; = 'edf'a //eb //dc //f//使用length 属性let &#123;length: len&#125; = 'hello'len //5 数值和布尔值123456let &#123;toString: s&#125; = 123;s // function toString()&#123;&#125;s ==== Number.prototype.toString //truelet &#123;toString: s&#125; = true;s === Boolean.prototype.toString //true 函数参数的解构赋值1234567891011121314function add([x,y])&#123;return x+ y;&#125;add([1,2]) //3// 获取键名for (let [key] of map) &#123;// ...&#125;// 获取键值for (let [,value] of map) &#123;// ...&#125; 字符串扩展1234567891.字符串模板2.字符串遍历 for..of3.at4.includes5.startsWith6.endsWith7.repeat 重复n次返回新字符串8.padStart 头部补全9.padEnd 正则扩展1231.RegExp构造函数new RegExp(/abc/ig, 'i').flags //覆盖2.字符串正则方法 match replace split search 全部指向正则 数值扩展12345671.Number.isFinite() Number.isNaN() Number.isInteger() //判断是否是整数 2.Number.parseInt() Number.parseFloat()3.Number.EPSILON 极小常量4.Number.isSafeInteger()5.Math.trunc()返回整数部分6.Math.sign() //-1 负数 +1 正数 0: 07.Math.cbrt() //立方根 数组扩展11.Array.from() //类数组 可遍历对象 转换为数组","categories":[{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/categories/JS/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://ic-.gihub.io/tags/ES6/"},{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/tags/JS/"}]},{"title":"git","slug":"git","date":"2017-02-20T12:09:26.000Z","updated":"2017-03-01T08:19:21.000Z","comments":true,"path":"2017/02/20/git/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/git/","excerpt":"Git git 命令大全 git –help git init git add readme.md git commit -m ‘readme.md’ git status git branch git branch dev git checkout dev git checkout master git merge dev git merge –no-ff -m “merge name-1 to name” branch git branch -d dev","text":"Git git 命令大全 git –help git init git add readme.md git commit -m ‘readme.md’ git status git branch git branch dev git checkout dev git checkout master git merge dev git merge –no-ff -m “merge name-1 to name” branch git branch -d dev clone git clone xxxx.git newfilename log git log git log -1 git log -5 git reflog remote 远程仓库 git remote add origin git@github.com:ic-/code 报错的话 ： git remote rm origin git push -u origin master //首次 git remote -v 远端仓库实际链接 git remote rm 别名[alias] git remote add [alias] git@gitxxx.gitfetch 从远端仓库下载新分支与数据push pull 从远端仓库提取数据并尝试合并到当前分支 本地和远程有冲突的话： git pull origin master git push origin master git psuh origin master //默认 git push origin dev //推送某个分支 git push origin :dev //删除远程分支 git push origin -f 强制覆盖 Reset checkout revert reset checkout (指定文件或所有文件) revert 不能指定文件 git reset HEAD@{2}/git checkout hotfixbranch –soft 缓存区和工作目录都不会被改变 –mixed 默认选项。缓存区和你指定的提交同步，但工作目录不受影响 –hard 缓存区和工作目录都同步到你指定的提交 alias 配置别名 git config –global alias.st status // 用st 代替 status git st git config –global aliss.co checkout git co git config –global alias.ci commit git ci git config –global alias.br branch git br 查看别名： cat .git/config vim .git/config //[alias] 修改 文件忘记忽略上传远程服务器问题解决：编辑 .gitignore 文件添加忽略git rm -r –cached .git add .git commit -m ‘repush’git push gitlab master 代码分支有问题问题：基础框架最新版本有问题，不知道的情况下提交了gitlab解决： - 方法1： - 获取gitlab owner权限 - 本地master分支代码reset到正确节点 - git push -f 强制覆盖 - 方法2： - 本地拉个dev分支 分支代码reset到正确节点 备用 - git 删除master 代码 提交远程 - git merge dev - merge 代码没过来。。 - 用了拷贝 - git push 到远程","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://ic-.gihub.io/tags/git/"}]},{"title":"http","slug":"http","date":"2017-02-20T10:52:24.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/http/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/http/","excerpt":"DNS 浏览器中的URL通过DNS解析成IP DNS 服务器是集群是分层级的，没有任何一个单一的 DNS 服务器是中包含所有服务器 如果一个服务器没着到，会沿着节点一层一层往上找 每一个请求都是独立的无状态的 URL 由三部分组成 HTTP 协议 www","text":"DNS 浏览器中的URL通过DNS解析成IP DNS 服务器是集群是分层级的，没有任何一个单一的 DNS 服务器是中包含所有服务器 如果一个服务器没着到，会沿着节点一层一层往上找 每一个请求都是独立的无状态的 URL 由三部分组成 HTTP 协议 www 媒体类型（MIME type） 因特网上有数千种不同的数据类型，HTTP 仔细地给每种要通过 Web 传输的对象都打上了名为 MIME 类型 content-type = text\\/html text\\/plain image\\/jpg URI 为统一资源标识符 每个 Web 服务器资源都有一个名字URI url 统一资源定位符: https:\\/\\/static.jdpay.com\\/m-wallet\\/v0.4.0\\/img\\/favicon.ico 协议 (scheme) https:\\/\\/ || https:\\/\\/ 网址 static.jdpay.com 资源路径 \\/m-wallet\\/v0.4.0\\/img\\/favicon.ico urn 统一资源名 与资源地无关 如： 不论因特网标准文档 RFC 2141 位于何处 都可以用 URN 来命名它： urn:ietf:rfc:2141 事物 一个http事物由一条客户端发起的请求命令和一个服务端返回响应结果构成 这种通信是通过HTTP报文的格式数据进行的 方法 GET 从服务器向客户端发送命名资源 POST 将客户端数据发送到一个服务器网关应用程序 OPTIONS 查询针对请求URI指定的资源支持的方法。 DELETE 从服务器中删除命名资源 PUT 将来自客户端的数据存储到一个命名的服务器资源中去 HEAD 仅发送命名资源响应中的 HTTP 首部 CONNECT 方法要求在代理服务器通信时建立隧道，实现隧道协议进行TCP通信。 TRACE 方法是让WEB服务器端将之前的请求通信环回给客户端的方法。 状态码 1XX 信息状态码 接受的请求正在处理 2XX 成功状态吗 请求正常处理完毕 3XX 重定向状态码 需要进行附加操作以完成请求 4XX 客户端错误状态码 服务器无法处理请求 5XX 服务器错误状态码 服务器处理请求出错 报文 起始行 HTTP\\/1.1 200 OK 首部字段 Server: nginx Connection: keep-alive … 主体 发送的数据 返回的数据 链接 TCP\\/IP 传输协议 无差错的数据传输 按序传输 未分段的数据流 版本 HTTP\\/0.9 有缺陷不支持多媒体的 MIME 类型，各种 HTTP 首部 HTTP\\/1.0 广泛使用 HTTP\\/1.1 当前使用 HTTP\\/2.0| HTTP-NG 优化性能 ip 网络层 -&gt; TCP 传输层 -&gt; HTTP应用层 一次url请求 浏览器从url中解析出服务器的主机名称 浏览器将服务器的主机名称转换成服务器ip 通过 DNS 解析出端口 浏览器建立与 web 服务器的 TCP 链接 浏览器向服务器发送一条 http 请求报文 服务器返回给浏览器一条 HTTP 响应报文 关闭链接，浏览器显示文档 WEB 的结构组件123456789101112- 代理- 位于客户端和服务端中间- 对请求和响应进行过滤等操作- 缓存- HTTP 仓库 使常用副本保存在离客户端更近的地方- 网关- 链接其他服务器的特殊 WEB 服务器- HTTP &lt;-(http)-&gt; HTTP/FTP 网关 &lt;-(FTP)-&gt; FTP 服务器- 隧道- 对 HTTP 通信报文进行盲转发的特殊代理。- Agent 代理- 发起自动 HTTP 请求的半智能 Web 客户端。 HTTP REQUEST 由3部分组成： 请求行 请求报头 请求正文 请求行 Method Request-URI HTTP-Version POST /loan/record HTTP/1.1 Method : GET POST HEAD PUT DELETE TRACE OPTIONS HEAD 请求获取由Request-URI所标识的资源的响应消息报头 RTACE 请求服务器回送收到的请求信息，主要用于测试或诊断 OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求 请求报头 请求正文 HTTP RESPONSE 由3部分组成：状态行 消息报头 响应正文 请求行 HTTP-Version Status-code \b描述 HTTP/1.1 200 ok Status-code 1XX 信息状态码 接受的请求正在处理 2XX 成功状态吗 请求正常处理完毕 3XX 重定向状态码 需要进行附加操作以完成请求 4XX 客户端错误状态码 服务器无法处理请求 5XX 服务器错误状态码 服务器处理请求出错 200 OK：请求正常处理。 204 No Content：请求正常处理，但没有资源可返回。 206 Partial Content： 客户端进行了范围请求，服务器成功执行这部分GET请求。 301 Moved Permanently： 永久性重定向，表明该资源已被分配了新的URI。 302 Found： 临时性重定向，表明该资源暂时被分配了新的URI。 303 See Other：表明请求的资源存在另一个URI，明确要求客户端采用GET方法重定向请求资源。 304 Not Modified : 未改变，使用缓存 400 Bad Request：请求报文中存在语法错误，需修改请求内容后再次发送。 401 Unauthorized*：请求需包含通过HTTP认证（BASIC认证、DIGEST认证等）的认证信息，浏览器初次接收401响应会弹出认证窗口。若之前已进行过一次请求，则表示用户认证失败。 403 Forbidden：请求资源的访问被服务器拒绝。服务器端没有必要给出拒绝的详细理由，不过也可以在响应主体部分对原因进行描述。未获得文件系统的访问授权（比如在IIS上部署网站时默认不能通过浏览器访问文件）、访问权限出现问题（比如从未授权的发送源IP地址试图访问）都有可能返回403响应。 404 Not Found：服务器无法找到请求的资源（也可在服务器端拒绝访问且不想说明理由时使用）。 500 Internal Server Error：服务器端执行请求时发生内部错误。多为服务器端程序出现Bug。 503 Service Unavailable：服务器处于超负载或正在停机维护，暂时无法处理请求。 消息报头 请求头 通用header Content-Type : 请求体/响应体的类型，如：text/plain、application/json Accept : 说明接收的类型，可以多个值，用,(半角逗号)分开 Content-Length : 请求体/响应体的长度，单位字节 Content-Encoding : \b请求体/响应体的编码格式，如gzip, deflate Accept-Encoding : 告知对方我接受的Content-Encoding ETag : 当前资源的标识，和Last-modified, If-None-Match, if-Modified-since 配合，用于控制缓存 Cache-Control : 取值一般维 no-cache 或者 max-age=xx, xx为整数，表示该资源缓存有效期（秒） Connection : keep-alive 服务端和客户端的TCP不会关闭! 请求Header Authorization: 用于设置身份认证信息 User-Agent : 用户标识如 OS浏览器的类型和版本 If-Modified-since : 值为上一次Last-Modified的被值，用于确认摸个资源是否被更改过，没有更改就从缓存中取。 Cookie : 已有的cookie Referer : 页面地址上一次个路由， 来源 Host : 请求主机的端口 响应的header Data: 服务器的日期 Last-Modified : 资源最后呗修改的时间 Transfer-Encoding : 取值为一般为chunked，出现在Content-Length不能确定的情况下，表示服务器不知道响应版体的数据大小，一般同时还会出现Content-Encoding响应头 Set-cookie : \b设置cookie Location : 重定向到另一个URL，如输入浏览器就输入baidu.com回车，会自动跳到 https://www.baidu.com ，就是通过这个响应头控制的 Server : 后台服务器","categories":[{"name":"http","slug":"http","permalink":"https://ic-.gihub.io/categories/http/"}],"tags":[{"name":"http","slug":"http","permalink":"https://ic-.gihub.io/tags/http/"}]},{"title":"scrollView","slug":"scrollView","date":"2017-02-20T10:39:33.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/scrollView/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/scrollView/","excerpt":"scrollIntoView Syntax event.target.scrollIntoView() document.getElementById(‘demo’).scrollIntoView()","text":"scrollIntoView Syntax event.target.scrollIntoView() document.getElementById(‘demo’).scrollIntoView() Parameters scrollIntoView() scrollIntoView(alignToTop) true //align to the top of the visible area false //align to buttom of the visible area scrollIntoView(scrollIntoViewOptions) scrollIntoViewOptions bool/object {behavior: “auto” | “instant” | “smooth”,block: “start” | “end”,} {block: “start”} === false {block: “end”} === true","categories":[{"name":"css","slug":"css","permalink":"https://ic-.gihub.io/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"https://ic-.gihub.io/tags/css/"},{"name":"scrollView","slug":"scrollView","permalink":"https://ic-.gihub.io/tags/scrollView/"}]},{"title":"browser","slug":"browser","date":"2017-02-17T02:25:32.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/17/browser/","link":"","permalink":"https://ic-.gihub.io/2017/02/17/browser/","excerpt":"12345678910111213141516171819var browser = &#123; versions: function()&#123; let u = window.navigator.userAgent; return &#123; trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf('iPhone') &gt; -1 || u.indexOf('Mac') &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否为iPad webApp: u.indexOf('Safari') == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf('MicroMessenger') == -1 //是否为微信浏览器 &#125; &#125;&#125;module.exports = browser","text":"12345678910111213141516171819var browser = &#123; versions: function()&#123; let u = window.navigator.userAgent; return &#123; trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf('iPhone') &gt; -1 || u.indexOf('Mac') &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否为iPad webApp: u.indexOf('Safari') == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf('MicroMessenger') == -1 //是否为微信浏览器 &#125; &#125;&#125;module.exports = browser ``` jsvar browser = { versions: function(){ let u = window.navigator.userAgent; return { trident: u.indexOf(‘Trident’) &gt; -1, //IE内核 presto: u.indexOf(‘Presto’) &gt; -1, //opera内核 webKit: u.indexOf(‘AppleWebKit’) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(‘Gecko’) &gt; -1 &amp;&amp; u.indexOf(‘KHTML’) == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.Mobile./), //是否为移动终端 ios: !!u.match(/(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(‘Android’) &gt; -1 || u.indexOf(‘Linux’) &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf(‘iPhone’) &gt; -1 || u.indexOf(‘Mac’) &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf(‘iPad’) &gt; -1, //是否为iPad webApp: u.indexOf(‘Safari’) == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf(‘MicroMessenger’) == -1 //是否为微信浏览器 } }} module.exports = browser var browser = { versions: function(){ let u = window.navigator.userAgent; return { trident: u.indexOf(‘Trident’) &gt; -1, //IE内核 presto: u.indexOf(‘Presto’) &gt; -1, //opera内核 webKit: u.indexOf(‘AppleWebKit’) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(‘Gecko’) &gt; -1 &amp;&amp; u.indexOf(‘KHTML’) == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.Mobile./), //是否为移动终端 ios: !!u.match(/(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(‘Android’) &gt; -1 || u.indexOf(‘Linux’) &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf(‘iPhone’) &gt; -1 || u.indexOf(‘Mac’) &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf(‘iPad’) &gt; -1, //是否为iPad webApp: u.indexOf(‘Safari’) == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf(‘MicroMessenger’) == -1 //是否为微信浏览器 } } } module.exports = browser","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/tags/JS/"},{"name":"browser","slug":"browser","permalink":"https://ic-.gihub.io/tags/browser/"}]}]}