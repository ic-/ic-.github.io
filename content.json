{"meta":{"title":"ke_xx","subtitle":null,"description":"Blog Record Other","author":"ke_xx","url":"https://ic-.gihub.io"},"pages":[{"title":"archive","date":"2017-02-16T03:32:03.000Z","updated":"2017-02-16T03:33:05.000Z","comments":true,"path":"archive/index.html","permalink":"https://ic-.gihub.io/archive/index.html","excerpt":"","text":"1111"},{"title":"分类","date":"2017-02-20T10:38:28.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"categories/index.html","permalink":"https://ic-.gihub.io/categories/index.html","excerpt":"","text":""},{"title":"record","date":"2017-02-16T03:32:13.000Z","updated":"2017-02-16T03:33:05.000Z","comments":true,"path":"record/index.html","permalink":"https://ic-.gihub.io/record/index.html","excerpt":"","text":"22222"},{"title":"标签云","date":"2014-12-22T04:39:04.000Z","updated":"2017-02-21T02:28:25.000Z","comments":false,"path":"tags/index.html","permalink":"https://ic-.gihub.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"gen-thunk-promise-co","slug":"gen-thunk-promise-co","date":"2017-02-20T12:37:12.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/gen-thunk-promise-co/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/gen-thunk-promise-co/","excerpt":"","text":"Generator 传统异步 代码各种嵌套 promise 只是改变了写法 然后最后用catch 捕获执行中的错误 1234567891011121314var readFile = require('fs-readFile-promise')readFile(fileA).then(function(data)&#123;console.log(data.toString())&#125;).then(function()&#123;return readFile(fileB)&#125;).then(function(data)&#123;console.log(data.toString())&#125;).catch(function(err)&#123;//&#125;) Generator ES6 中协程的体现 函数可以交出执行权（即暂停执行，又可以恢复执行） function name(){} 必须加上 号 整个 Generator 就是一个异步函数封装器 Gen 函数执行返回一个内部指针 函数体内外数据交互，处理错误机制 12345678910111213141516function* gen(x)&#123;var y = yield x + 2;return y&#125;var g = gen(1)g.next() // &#123;value: 3, done: false&#125;g.next() // &#123;value: undefined, done: true&#125;var g = g.gen(1)g.next() //&#123;value: 3, done: false&#125;g.next(2) //&#123;value:2, done: true&#125;var g = gen()g.next(2) // undefined+2 = NaN &#123;value:NaN, done: false&#125;g.next(3) // &#123;value: 3, done: true&#125; 1234567891011121314151617181920212223242526//内部处理错误，外部捕获function* gen(x)&#123;try&#123;var y = yield x + 2;&#125;catch(x)&#123;console.log(e)&#125;return y&#125;//异步var fetch = require('node-fetch')function* gen()&#123;var url = 'https://api.github.com/users/github';var result = yield fetch(url);console.log(result.bio)&#125;var g = gen();var result = g.next(); //执行fetch &#123;value: data, done: true&#125;result.value.then(function(data)&#123;return data.json()&#125;).then(function(data)&#123;g.next(data)&#125;) Thunk 传名调用 call by name 即只有在用的时候求值 用函数作为参数传入，调用的时候执行函数实现 thunk 函数的含义 实现将参数放到一个零时的函数，然后把这个临时函数传入函数内，这个临时函数就是Thunk 1234567891011121314function f(m)&#123;return m*2&#125;f(x+5)//等同于var thunk = function()&#123;return x+5&#125;function f(thunk)&#123;return thunk()*2&#125; Javascript语言的thunk函数 Thunk 函数替换的是多参数函数 将其替换成单参数的版本，且只接受回调函数作为参数 任意函数只要有回调函数都能写成Thunk函数的形式 生产环境转行 thunkify 123456789101112131415161718192021222324252627//正常版本的readFile(多参数版本)fs.readFile(filename, callback)//Thunk 版本的 readFile(单参数)var readFileThunk = Thunk(fileName);readFileThunk(callback)var Thunk = function(filename)&#123;return function(callback)&#123;return fs.readFile(filename, callback)&#125;&#125;// Thunk函数转换器var Thunk = function(fn)&#123;return function()&#123;var args = Array.prototype.slice.call(arguments);return function(callback)&#123;args.push(callback)return fn.apply(this,args)&#125;&#125;&#125;var readFileThunk = Thunk(fs.readFile);readFileThunk(filename)(callback) Generator 函数的流程管理 1234567891011121314151617181920212223var fs = require('fs')var thunkify = require('thunkify')var readFile = thunkify(fs.readFile)var gen = function* ()&#123;var r1 = yield readFile('/etc/fstab');console.log(r1.toString())var r2 = yield readFile('/etc/shells')console.log(r2.toString())&#125;var g = gen()var r1 = g.next()r1.value(function(err, data)&#123;if(err)throw errvar r2 = g.next(data) //把读取的data 往后传r2.value(function(err, data)&#123;if(err) throw errg.next(data)&#125;)&#125;) Thunk 函数的自动流程管理 1234567891011121314151617181920function run(fn)&#123;var gen = fn()function next(err, data)&#123;var result = gen.next(data)if(result.done)returnresult.value(next)&#125;next()&#125;var gen = function* ()&#123;var f1 = yield readFile('fileA');var f2 = yield readFile('fileB')var f3 = yield readFile('fileC')&#125;run(gen)","categories":[],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://ic-.gihub.io/tags/ES6/"},{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/tags/JS/"},{"name":"Generator","slug":"Generator","permalink":"https://ic-.gihub.io/tags/Generator/"},{"name":"thunk","slug":"thunk","permalink":"https://ic-.gihub.io/tags/thunk/"},{"name":"promise","slug":"promise","permalink":"https://ic-.gihub.io/tags/promise/"},{"name":"co","slug":"co","permalink":"https://ic-.gihub.io/tags/co/"}]},{"title":"ES6","slug":"ES6","date":"2017-02-20T12:22:07.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/ES6/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/ES6/","excerpt":"ES6Let &amp; Const123456789101112131415161718192021/*1.没有预加载 变量提升2.块级作用域中 \b如果有声明变量，那么在声明之前不能使用\\(暂时性死区\\)3.不允许重复声明4.块级作用域5.允许块级作用域中声明函数 大括号 必须6.const 声明常量 let 声明变量7.顶层变量 不再window下*/function f1() &#123; let n = 5; if (true) &#123; let n = 10; &#125; console.log(n); // 5&#125;if(true)&#123; function f() &#123;&#125;&#125;let x = 1;window.x //undefined","text":"ES6Let &amp; Const123456789101112131415161718192021/*1.没有预加载 变量提升2.块级作用域中 \b如果有声明变量，那么在声明之前不能使用\\(暂时性死区\\)3.不允许重复声明4.块级作用域5.允许块级作用域中声明函数 大括号 必须6.const 声明常量 let 声明变量7.顶层变量 不再window下*/function f1() &#123; let n = 5; if (true) &#123; let n = 10; &#125; console.log(n); // 5&#125;if(true)&#123; function f() &#123;&#125;&#125;let x = 1;window.x //undefined 变量的解构：123456789101112131415按照一定的模式，从数组和对象中提取值，对变量进行赋值如果解构不成功等于undefined适用于 var let const数组按顺序对象按key值对象解构中模式不会被赋值 （即： let &#123;a: &#123;b: c&#125;&#125; = obj 中的a,b）数组 字符串 的length 可以用不要再模式中使用圆括号 数组解构123456789101112131415161718//匹配模式：var [a, b, c] = [1, 2, 3]a //1b //2c //3let [, ,third] = ['foo', 'bar', 'baz']third //'baz'let [head, ...tail] = [1,2,3,4]head //1tail //[2,3,4]//默认值：var [x= 1] = [undefined]x //1var [x = 1] = [null]x //null 对象解构123456789101112131415var &#123;foo, bar&#125; = &#123;foo: 'aaa', bar: 'bbb'&#125;foo //aaabar //bbblet obj = &#123;first: 'hello', last: 'world'&#125;let &#123;first: f, last: l&#125; = objf //hellol //worldfirst //error//默认值：var &#123;x = 3&#125; = &#123;&#125;x //3let &#123;log, sin, cos&#125; = Math 字符串解构12345678const &#123;a,b,c&#125; = 'edf'a //eb //dc //f//使用length 属性let &#123;length: len&#125; = 'hello'len //5 数值和布尔值123456let &#123;toString: s&#125; = 123;s // function toString()&#123;&#125;s ==== Number.prototype.toString //truelet &#123;toString: s&#125; = true;s === Boolean.prototype.toString //true 函数参数的解构赋值1234567891011121314function add([x,y])&#123;return x+ y;&#125;add([1,2]) //3// 获取键名for (let [key] of map) &#123;// ...&#125;// 获取键值for (let [,value] of map) &#123;// ...&#125; 字符串扩展1234567891.字符串模板2.字符串遍历 for..of3.at4.includes5.startsWith6.endsWith7.repeat 重复n次返回新字符串8.padStart 头部补全9.padEnd 正则扩展1231.RegExp构造函数new RegExp(/abc/ig, 'i').flags //覆盖2.字符串正则方法 match replace split search 全部指向正则 数值扩展12345671.Number.isFinite() Number.isNaN() Number.isInteger() //判断是否是整数 2.Number.parseInt() Number.parseFloat()3.Number.EPSILON 极小常量4.Number.isSafeInteger()5.Math.trunc()返回整数部分6.Math.sign() //-1 负数 +1 正数 0: 07.Math.cbrt() //立方根 数组扩展11.Array.from() //类数组 可遍历对象 转换为数组","categories":[{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/categories/JS/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"https://ic-.gihub.io/tags/ES6/"},{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/tags/JS/"}]},{"title":"git","slug":"git","date":"2017-02-20T12:09:26.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/git/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/git/","excerpt":"Git git 命令大全 git –help git init git add readme.md git commit -m ‘readme.md’ git status git branch git branch dev git checkout dev git checkout master git merge dev git merge –no-ff -m “merge name-1 to name” branch git branch -d dev","text":"Git git 命令大全 git –help git init git add readme.md git commit -m ‘readme.md’ git status git branch git branch dev git checkout dev git checkout master git merge dev git merge –no-ff -m “merge name-1 to name” branch git branch -d dev log git log git log -1 git log -5 git reflog remote 远程仓库 git remote add origin git@github.com:ic-/code 报错的话 ： git remote rm origin git push -u origin master //首次 push pull 本地和远程有冲突的话： git pull origin master git push origin master git psuh origin master //默认 git push origin dev //推送某个分支 git push origin :dev //删除远程分支 alias 配置别名 git config –global alias.st status // 用st 代替 status git st git config –global aliss.co checkout git co git config –global alias.ci commit git ci git config –global alias.br branch git br 查看别名： cat .git/config vim .git/config //[alias] 修改","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://ic-.gihub.io/tags/git/"}]},{"title":"http","slug":"http","date":"2017-02-20T10:52:24.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/http/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/http/","excerpt":"DNS 浏览器中的URL通过DNS解析成IP DNS 服务器是集群是分层级的，没有任何一个单一的 DNS 服务器是中包含所有服务器 如果一个服务器没着到，会沿着节点一层一层往上找 每一个请求都是独立的无状态的 URL 由三部分组成 HTTP 协议 www","text":"DNS 浏览器中的URL通过DNS解析成IP DNS 服务器是集群是分层级的，没有任何一个单一的 DNS 服务器是中包含所有服务器 如果一个服务器没着到，会沿着节点一层一层往上找 每一个请求都是独立的无状态的 URL 由三部分组成 HTTP 协议 www 媒体类型（MIME type） 因特网上有数千种不同的数据类型，HTTP 仔细地给每种要通过 Web 传输的对象都打上了名为 MIME 类型 content-type = text\\/html text\\/plain image\\/jpg URI 为统一资源标识符 每个 Web 服务器资源都有一个名字URI url 统一资源定位符: https:\\/\\/static.jdpay.com\\/m-wallet\\/v0.4.0\\/img\\/favicon.ico 协议 (scheme) https:\\/\\/ || https:\\/\\/ 网址 static.jdpay.com 资源路径 \\/m-wallet\\/v0.4.0\\/img\\/favicon.ico urn 统一资源名 与资源地无关 如： 不论因特网标准文档 RFC 2141 位于何处 都可以用 URN 来命名它： urn:ietf:rfc:2141 事物 一个http事物由一条客户端发起的请求命令和一个服务端返回响应结果构成 这种通信是通过HTTP报文的格式数据进行的 方法 GET 从服务器向客户端发送命名资源 POST 将客户端数据发送到一个服务器网关应用程序 OPTIONS 查询针对请求URI指定的资源支持的方法。 DELETE 从服务器中删除命名资源 PUT 将来自客户端的数据存储到一个命名的服务器资源中去 HEAD 仅发送命名资源响应中的 HTTP 首部 CONNECT 方法要求在代理服务器通信时建立隧道，实现隧道协议进行TCP通信。 TRACE 方法是让WEB服务器端将之前的请求通信环回给客户端的方法。 状态码 1XX 信息状态码 接受的请求正在处理 2XX 成功状态吗 请求正常处理完毕 3XX 重定向状态码 需要进行附加操作以完成请求 4XX 客户端错误状态码 服务器无法处理请求 5XX 服务器错误状态码 服务器处理请求出错 报文 起始行 HTTP\\/1.1 200 OK 首部字段 Server: nginx Connection: keep-alive … 主体 发送的数据 返回的数据 链接 TCP\\/IP 传输协议 无差错的数据传输 按序传输 未分段的数据流 版本 HTTP\\/0.9 有缺陷不支持多媒体的 MIME 类型，各种 HTTP 首部 HTTP\\/1.0 广泛使用 HTTP\\/1.1 当前使用 HTTP\\/2.0| HTTP-NG 优化性能 ip 网络层 -&gt; TCP 传输层 -&gt; HTTP应用层 一次url请求 浏览器从url中解析出服务器的主机名称 浏览器将服务器的主机名称转换成服务器ip 通过 DNS 解析出端口 浏览器建立与 web 服务器的 TCP 链接 浏览器向服务器发送一条 http 请求报文 服务器返回给浏览器一条 HTTP 响应报文 关闭链接，浏览器显示文档 WEB 的结构组件123456789101112- 代理- 位于客户端和服务端中间- 对请求和响应进行过滤等操作- 缓存- HTTP 仓库 使常用副本保存在离客户端更近的地方- 网关- 链接其他服务器的特殊 WEB 服务器- HTTP &lt;-(http)-&gt; HTTP/FTP 网关 &lt;-(FTP)-&gt; FTP 服务器- 隧道- 对 HTTP 通信报文进行盲转发的特殊代理。- Agent 代理- 发起自动 HTTP 请求的半智能 Web 客户端。 HTTP REQUEST 由3部分组成： 请求行 请求报头 请求正文 请求行 Method Request-URI HTTP-Version POST /loan/record HTTP/1.1 Method : GET POST HEAD PUT DELETE TRACE OPTIONS HEAD 请求获取由Request-URI所标识的资源的响应消息报头 RTACE 请求服务器回送收到的请求信息，主要用于测试或诊断 OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求 请求报头 请求正文 HTTP RESPONSE 由3部分组成：状态行 消息报头 响应正文 请求行 HTTP-Version Status-code \b描述 HTTP/1.1 200 ok Status-code 1XX 信息状态码 接受的请求正在处理 2XX 成功状态吗 请求正常处理完毕 3XX 重定向状态码 需要进行附加操作以完成请求 4XX 客户端错误状态码 服务器无法处理请求 5XX 服务器错误状态码 服务器处理请求出错 200 OK：请求正常处理。 204 No Content：请求正常处理，但没有资源可返回。 206 Partial Content： 客户端进行了范围请求，服务器成功执行这部分GET请求。 301 Moved Permanently： 永久性重定向，表明该资源已被分配了新的URI。 302 Found： 临时性重定向，表明该资源暂时被分配了新的URI。 303 See Other：表明请求的资源存在另一个URI，明确要求客户端采用GET方法重定向请求资源。 304 Not Modified : 未改变，使用缓存 400 Bad Request：请求报文中存在语法错误，需修改请求内容后再次发送。 401 Unauthorized*：请求需包含通过HTTP认证（BASIC认证、DIGEST认证等）的认证信息，浏览器初次接收401响应会弹出认证窗口。若之前已进行过一次请求，则表示用户认证失败。 403 Forbidden：请求资源的访问被服务器拒绝。服务器端没有必要给出拒绝的详细理由，不过也可以在响应主体部分对原因进行描述。未获得文件系统的访问授权（比如在IIS上部署网站时默认不能通过浏览器访问文件）、访问权限出现问题（比如从未授权的发送源IP地址试图访问）都有可能返回403响应。 404 Not Found：服务器无法找到请求的资源（也可在服务器端拒绝访问且不想说明理由时使用）。 500 Internal Server Error：服务器端执行请求时发生内部错误。多为服务器端程序出现Bug。 503 Service Unavailable：服务器处于超负载或正在停机维护，暂时无法处理请求。 消息报头 请求头 通用header Content-Type : 请求体/响应体的类型，如：text/plain、application/json Accept : 说明接收的类型，可以多个值，用,(半角逗号)分开 Content-Length : 请求体/响应体的长度，单位字节 Content-Encoding : \b请求体/响应体的编码格式，如gzip, deflate Accept-Encoding : 告知对方我接受的Content-Encoding ETag : 当前资源的标识，和Last-modified, If-None-Match, if-Modified-since 配合，用于控制缓存 Cache-Control : 取值一般维 no-cache 或者 max-age=xx, xx为整数，表示该资源缓存有效期（秒） Connection : keep-alive 服务端和客户端的TCP不会关闭! 请求Header Authorization: 用于设置身份认证信息 User-Agent : 用户标识如 OS浏览器的类型和版本 If-Modified-since : 值为上一次Last-Modified的被值，用于确认摸个资源是否被更改过，没有更改就从缓存中取。 Cookie : 已有的cookie Referer : 页面地址上一次个路由， 来源 Host : 请求主机的端口 响应的header Data: 服务器的日期 Last-Modified : 资源最后呗修改的时间 Transfer-Encoding : 取值为一般为chunked，出现在Content-Length不能确定的情况下，表示服务器不知道响应版体的数据大小，一般同时还会出现Content-Encoding响应头 Set-cookie : \b设置cookie Location : 重定向到另一个URL，如输入浏览器就输入baidu.com回车，会自动跳到 https://www.baidu.com ，就是通过这个响应头控制的 Server : 后台服务器","categories":[{"name":"http","slug":"http","permalink":"https://ic-.gihub.io/categories/http/"}],"tags":[{"name":"http","slug":"http","permalink":"https://ic-.gihub.io/tags/http/"}]},{"title":"scrollView","slug":"scrollView","date":"2017-02-20T10:39:33.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/20/scrollView/","link":"","permalink":"https://ic-.gihub.io/2017/02/20/scrollView/","excerpt":"scrollIntoView Syntax event.target.scrollIntoView() document.getElementById(‘demo’).scrollIntoView()","text":"scrollIntoView Syntax event.target.scrollIntoView() document.getElementById(‘demo’).scrollIntoView() Parameters scrollIntoView() scrollIntoView(alignToTop) true //align to the top of the visible area false //align to buttom of the visible area scrollIntoView(scrollIntoViewOptions) scrollIntoViewOptions bool/object {behavior: “auto” | “instant” | “smooth”,block: “start” | “end”,} {block: “start”} === false {block: “end”} === true","categories":[{"name":"css","slug":"css","permalink":"https://ic-.gihub.io/categories/css/"}],"tags":[{"name":"scrollView","slug":"scrollView","permalink":"https://ic-.gihub.io/tags/scrollView/"},{"name":"css","slug":"css","permalink":"https://ic-.gihub.io/tags/css/"}]},{"title":"browser","slug":"browser","date":"2017-02-17T02:25:32.000Z","updated":"2017-02-21T02:28:25.000Z","comments":true,"path":"2017/02/17/browser/","link":"","permalink":"https://ic-.gihub.io/2017/02/17/browser/","excerpt":"12345678910111213141516171819var browser = &#123; versions: function()&#123; let u = window.navigator.userAgent; return &#123; trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf('iPhone') &gt; -1 || u.indexOf('Mac') &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否为iPad webApp: u.indexOf('Safari') == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf('MicroMessenger') == -1 //是否为微信浏览器 &#125; &#125;&#125;module.exports = browser","text":"12345678910111213141516171819var browser = &#123; versions: function()&#123; let u = window.navigator.userAgent; return &#123; trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf('iPhone') &gt; -1 || u.indexOf('Mac') &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否为iPad webApp: u.indexOf('Safari') == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf('MicroMessenger') == -1 //是否为微信浏览器 &#125; &#125;&#125;module.exports = browser ``` jsvar browser = { versions: function(){ let u = window.navigator.userAgent; return { trident: u.indexOf(‘Trident’) &gt; -1, //IE内核 presto: u.indexOf(‘Presto’) &gt; -1, //opera内核 webKit: u.indexOf(‘AppleWebKit’) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(‘Gecko’) &gt; -1 &amp;&amp; u.indexOf(‘KHTML’) == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.Mobile./), //是否为移动终端 ios: !!u.match(/(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(‘Android’) &gt; -1 || u.indexOf(‘Linux’) &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf(‘iPhone’) &gt; -1 || u.indexOf(‘Mac’) &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf(‘iPad’) &gt; -1, //是否为iPad webApp: u.indexOf(‘Safari’) == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf(‘MicroMessenger’) == -1 //是否为微信浏览器 } }} module.exports = browser var browser = { versions: function(){ let u = window.navigator.userAgent; return { trident: u.indexOf(‘Trident’) &gt; -1, //IE内核 presto: u.indexOf(‘Presto’) &gt; -1, //opera内核 webKit: u.indexOf(‘AppleWebKit’) &gt; -1, //苹果、谷歌内核 gecko: u.indexOf(‘Gecko’) &gt; -1 &amp;&amp; u.indexOf(‘KHTML’) == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.Mobile./), //是否为移动终端 ios: !!u.match(/(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf(‘Android’) &gt; -1 || u.indexOf(‘Linux’) &gt; -1, //android终端或者uc浏览器 iPhone: u.indexOf(‘iPhone’) &gt; -1 || u.indexOf(‘Mac’) &gt; -1, //是否为iPhone或者安卓QQ浏览器 iPad: u.indexOf(‘iPad’) &gt; -1, //是否为iPad webApp: u.indexOf(‘Safari’) == -1, //是否为web应用程序，没有头部与底部 weixin: u.indexOf(‘MicroMessenger’) == -1 //是否为微信浏览器 } } } module.exports = browser","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"https://ic-.gihub.io/tags/JS/"},{"name":"browser","slug":"browser","permalink":"https://ic-.gihub.io/tags/browser/"}]}]}